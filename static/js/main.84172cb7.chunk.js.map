{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["getRandomLetter","alphabet","Math","floor","random","length","App","useState","word","setWords","emoji","setEmoji","fetchWords","a","chosenLetter","apiCall","fetch","then","response","json","filter","v","undefined","tags","isVerb","value","verbs","max","fetchEmoji","split","String","fromCodePoint","replace","useEffect","document","title","x","className","src","process","alt","onClick","r","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"kPAuEA,SAASA,IACL,IAAMC,EAAW,6BACjB,OAAOA,EAASC,KAAKC,MAAMD,KAAKE,SAAWH,EAASI,SAGzCC,MAzEf,WAAgB,IAAD,EACcC,mBAAS,IADvB,mBACJC,EADI,KACEC,EADF,OAEeF,mBAAS,IAFxB,mBAEJG,EAFI,KAEGC,EAFH,KAGLC,EAAU,uCAAG,8BAAAC,EAAA,sEACUb,IADV,cACXc,EADW,OAEXC,EAAU,qCAAuCD,EAAe,SAFrD,KAGfL,EAHe,SAILO,MAAMD,GACPE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAaA,EAwCtBC,QAAO,SAAAC,GAChB,QAAeC,IAAXD,EAAEE,KAAoB,CACtB,IADsB,EAClBC,GAAS,EADS,cAEJH,EAAEE,MAFE,IAEtB,2BAA0B,CAAC,IAAlBE,EAAiB,QACR,MAAVA,IACAD,GAAS,IAJK,8BAOtB,OAAOA,EAEP,OAAO,QAjDFP,MAAK,SAAAS,GAAK,OAAIA,GAsDTC,EAtD4BD,EAAMrB,OAuD7CH,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMwB,MADjD,IAAsBA,KA7DC,6EAAH,qDAUVC,EAAU,uCAAG,sBAAAf,EAAA,kEACfF,EADe,SAELK,MAAM,mDACPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OAAIA,EAAKT,MAAMmB,MAAM,KAAK,MACnCZ,MAAK,SAAAP,GAAK,OAAIoB,OAAOC,cAAcrB,EAAMsB,QAAQ,IAAK,IAAIA,QAAQ,KAAM,SALlE,6EAAH,qDAehB,OAPAC,qBAAU,WACNC,SAASC,MAAQ,aACJ,KAAT3B,GAAyB,KAAVE,IACfE,IAAaK,MAAK,SAAAmB,GAAC,OAAIA,KACvBR,IAAaX,MAAK,SAAAmB,GAAC,OAAIA,QAE5B,CAAC5B,EAAME,IAEN,qBAAK2B,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,iCACI,qBAAKC,IAAKC,oBAAsCC,IAAK,OAAQH,UAAW,aACxE,sBAAKA,UAAU,SAAf,UACK3B,EADL,iBACmC,KAATF,EAAcA,EAAKA,KAAO,OADpD,cACuEE,QAG3E,uBACA,wBAAQ2B,UAAW,SAAUI,QAAS,WAClC7B,IAAaK,MAAK,SAAAyB,GAAC,OAAIA,KACvBd,IAAaX,MAAK,SAAAyB,GAAC,OAAIA,MAF3B,+BC7BDC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5B,MAAK,YAAkD,IAA/C6B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFnB,SAASoB,eAAe,SAM1BX,M","file":"static/js/main.84172cb7.chunk.js","sourcesContent":["import React, {useEffect, useState} from \"react\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [word, setWords] = useState(\"\");\r\n    const [emoji, setEmoji] = useState(\"\");\r\n    const fetchWords = async () => {\r\n        let chosenLetter = await getRandomLetter();\r\n        let apiCall = \"https://api.datamuse.com/words?sp=\" + chosenLetter + \"*&md=p\";\r\n        setWords(\r\n            await fetch(apiCall)\r\n                .then(response => response.json())\r\n                .then(json => getVerbs(json))\r\n                .then(verbs => verbs[getRandomInt(verbs.length)])\r\n        )\r\n    };\r\n    const fetchEmoji = async () => {\r\n        setEmoji(\r\n            await fetch('https://ranmoji.herokuapp.com/emojis/api/v.1.0/')\r\n                .then(response => response.json())\r\n                .then(json => json.emoji.split(\";\")[0])\r\n                .then(emoji => String.fromCodePoint(emoji.replace(\";\", \"\").replace(\"&#\", \"0\")))\r\n        )\r\n    }\r\n    useEffect(() => {\r\n        document.title = \"X Your Mom\";\r\n        if (word === \"\" && emoji === \"\") {\r\n            fetchWords().then(x => x);\r\n            fetchEmoji().then(x => x);\r\n        }\r\n    }, [word, emoji]);\r\n    return (\r\n        <div className=\"App\">\r\n            <header className=\"App-header\">\r\n                <span>\r\n                    <img src={process.env.PUBLIC_URL + '/drew.jpg'} alt={\"drew\"} className={\"portrait\"}/>\r\n                    <div className=\"Bubble\">\r\n                        {emoji} I'm going to {word !== \"\" ? word.word : \"None\"} your mom. {emoji}\r\n                    </div>\r\n                </span>\r\n                <br/>\r\n                <button className={\"button\"} onClick={() => {\r\n                    fetchWords().then(r => r);\r\n                    fetchEmoji().then(r => r);\r\n                }}>Re-Drew It.\r\n                </button>\r\n            </header>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction getVerbs(words) {\r\n    return words.filter(v => {\r\n        if (v.tags !== undefined) {\r\n            let isVerb = false;\r\n            for (let value of v.tags) {\r\n                if (value === \"v\") {\r\n                    isVerb = true;\r\n                }\r\n            }\r\n            return isVerb;\r\n        } else {\r\n            return false;\r\n        }\r\n    });\r\n}\r\n\r\nfunction getRandomInt(max) {\r\n    return Math.floor(Math.random() * Math.floor(max));\r\n}\r\n\r\nfunction getRandomLetter() {\r\n    const alphabet = \"abcdefghijklmnopqrstuvwxyz\"\r\n    return alphabet[Math.floor(Math.random() * alphabet.length)]\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}